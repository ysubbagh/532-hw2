/***********************************************************
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License
 **********************************************************/
/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
/**
 * @interface
 * An interface representing DesiredState.
 */
export interface DesiredState {
  /**
   * @member {number} [code] Status code for the operation.
   */
  code?: number;
  /**
   * @member {number} [subCode] Sub status code for the status.
   */
  subCode?: number;
  /**
   * @member {number} [version] Version of the desired value received.
   */
  version?: number;
  /**
   * @member {string} [description] Description of the status.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing Reported.
 */
export interface Reported {
  /**
   * @member {any} [value] The current interface property value in a
   * digitalTwin.
   */
  // tslint:disable-next-line:no-any
  value?: any;
  /**
   * @member {DesiredState} [desiredState]
   */
  desiredState?: DesiredState;
}

/**
 * @interface
 * An interface representing Desired.
 */
export interface Desired {
  /**
   * @member {any} [value] The desired value of the interface property to set
   * in a digitalTwin.
   */
  // tslint:disable-next-line:no-any
  value?: any;
}

/**
 * @interface
 * An interface representing Property.
 */
export interface Property {
  /**
   * @member {Reported} [reported]
   */
  reported?: Reported;
  /**
   * @member {Desired} [desired]
   */
  desired?: Desired;
}

/**
 * @interface
 * An interface representing InterfaceModel.
 */
export interface InterfaceModel {
  /**
   * @member {string} [name] The name of digital twin interface, e.g.:
   * myThermostat.
   */
  name?: string;
  /**
   * @member {{ [propertyName: string]: Property }} [properties] List of all
   * properties in an interface.
   */
  properties?: { [propertyName: string]: Property };
}

/**
 * @interface
 * An interface representing DigitalTwinInterfaces.
 */
export interface DigitalTwinInterfaces {
  /**
   * @member {{ [propertyName: string]: InterfaceModel }} [interfaces]
   * Interface(s) data on the digital twin.
   */
  interfaces?: { [propertyName: string]: InterfaceModel };
  /**
   * @member {number} [version] Version of digital twin.
   */
  version?: number;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired.
 */
export interface DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired {
  /**
   * @member {any} [value] The desired value of the interface property to set
   * in a digitalTwin.
   */
  // tslint:disable-next-line:no-any
  value?: any;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValuePropertiesValue.
 */
export interface DigitalTwinInterfacesPatchInterfacesValuePropertiesValue {
  /**
   * @member {DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired}
   * [desired]
   */
  desired?: DigitalTwinInterfacesPatchInterfacesValuePropertiesValueDesired;
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatchInterfacesValue.
 */
export interface DigitalTwinInterfacesPatchInterfacesValue {
  /**
   * @member {{ [propertyName: string]:
   * DigitalTwinInterfacesPatchInterfacesValuePropertiesValue }} [properties]
   * List of properties to update in an interface.
   */
  properties?: { [propertyName: string]: DigitalTwinInterfacesPatchInterfacesValuePropertiesValue };
}

/**
 * @interface
 * An interface representing DigitalTwinInterfacesPatch.
 */
export interface DigitalTwinInterfacesPatch {
  /**
   * @member {{ [propertyName: string]:
   * DigitalTwinInterfacesPatchInterfacesValue }} [interfaces] Interface(s)
   * data to patch in the digital twin.
   */
  interfaces?: { [propertyName: string]: DigitalTwinInterfacesPatchInterfacesValue };
}

/**
 * @interface
 * An interface representing DigitalTwinUpdateMultipleInterfacesOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DigitalTwinUpdateMultipleInterfacesOptionalParams {
  /**
   * @member {string} [ifMatch]
   */
  ifMatch?: string;
}

/**
 * @interface
 * An interface representing DigitalTwinInvokeInterfaceCommandOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface DigitalTwinInvokeInterfaceCommandOptionalParams {
  /**
   * @member {number} [responseTimeoutInSeconds] Response timeout in seconds.
   */
  responseTimeoutInSeconds?: number;
  /**
   * @member {number} [connectTimeoutInSeconds] Connect timeout in seconds.
   */
  connectTimeoutInSeconds?: number;
}
